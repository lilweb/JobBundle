// Generated by CoffeeScript 1.6.3
var Application, DayView, Job, JobView, JobsCollection, Task, TaskCollection, TaskView, TasksView, baseUrl, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

baseUrl = "http://ping.me/app_dev.php";

$(function() {
  var application;
  console.log("Starting application");
  application = new Application();
  return $(".loadNextDay").click(function(event) {
    event.preventDefault();
    event.stopPropagation();
    return application.loadNextDay();
  });
});

Application = (function(_super) {
  __extends(Application, _super);

  function Application() {
    _ref = Application.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  Application.prototype.el = $("#application");

  Application.prototype.lastId = null;

  Application.prototype.lastDate = null;

  Application.prototype.initialize = function() {
    this.lastDate = new Date();
    this.lastId = 0;
    return this.loadDay(this.lastDate);
  };

  Application.prototype.loadDay = function(date) {
    var dayView;
    dayView = new DayView(date, this.lastId + 1);
    return $("#application .loadNextDay").before(dayView.render());
  };

  Application.prototype.loadNextDay = function() {
    this.lastId = this.lastId + 1;
    this.lastDate = new Date(this.lastDate.setDate(this.lastDate.getDate() - 1));
    return this.loadDay(this.lastDate);
  };

  return Application;

})(Backbone.View);

Job = (function(_super) {
  __extends(Job, _super);

  function Job() {
    _ref1 = Job.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Job.prototype.defaults = {
    id: null,
    name: null,
    dateCreation: null,
    dateUpdate: null,
    status: null
  };

  return Job;

})(Backbone.Model);

Task = (function(_super) {
  __extends(Task, _super);

  function Task() {
    _ref2 = Task.__super__.constructor.apply(this, arguments);
    return _ref2;
  }

  Task.prototype.defaults = {
    id: null,
    name: null,
    dateCreation: null,
    dateUpdate: null,
    status: null
  };

  return Task;

})(Backbone.Model);

JobsCollection = (function(_super) {
  __extends(JobsCollection, _super);

  function JobsCollection() {
    _ref3 = JobsCollection.__super__.constructor.apply(this, arguments);
    return _ref3;
  }

  JobsCollection.prototype.model = Job;

  JobsCollection.prototype.initialize = function(date) {
    return this.date = date;
  };

  JobsCollection.prototype.url = function() {
    return baseUrl + "/api/v1/jobs/" + this.date.getFullYear() + "/" + (this.date.getMonth() + 1) + "/" + this.date.getDate() + "/list.json";
  };

  return JobsCollection;

})(Backbone.Collection);

TaskCollection = (function(_super) {
  __extends(TaskCollection, _super);

  function TaskCollection() {
    _ref4 = TaskCollection.__super__.constructor.apply(this, arguments);
    return _ref4;
  }

  TaskCollection.prototype.model = Task;

  TaskCollection.prototype.id = null;

  TaskCollection.prototype.initialize = function(id) {
    return this.id = id;
  };

  TaskCollection.prototype.url = function() {
    if (this.id) {
      return baseUrl + "/api/v1/tasks/" + this.id + ".json";
    }
  };

  return TaskCollection;

})(Backbone.Collection);

TaskView = (function(_super) {
  __extends(TaskView, _super);

  function TaskView() {
    _ref5 = TaskView.__super__.constructor.apply(this, arguments);
    return _ref5;
  }

  TaskView.prototype.tagName = "li";

  TaskView.prototype.events = {
    "click .showMessage": "showMessage",
    "click .restartTask": "restart"
  };

  TaskView.prototype.initialize = function() {
    return this.model.bind("change", this.render);
  };

  TaskView.prototype.render = function() {
    var tmpl;
    tmpl = _.template($("#taskTemplate").html());
    this.$el.html(tmpl(this.model.toJSON()));
    return this;
  };

  TaskView.prototype.showMessage = function(event) {
    event.preventDefault();
    event.stopPropagation();
    return alert(this.model.toJSON().message);
  };

  TaskView.prototype.restart = function(event) {
    event.preventDefault();
    event.stopPropagation();
    if (window.confirm("Vous Ãªtes sur de vouloir relancer cette tache ainsi que les suivantes?")) {
      return console.log("Restart", this.model.toJSON().id);
    }
  };

  return TaskView;

})(Backbone.View);

TasksView = (function(_super) {
  __extends(TasksView, _super);

  function TasksView() {
    _ref6 = TasksView.__super__.constructor.apply(this, arguments);
    return _ref6;
  }

  TasksView.prototype.id = null;

  TasksView.prototype.setId = function(id) {
    this.id = id;
    this.collection = new TaskCollection(id);
    this.collection.bind("add", this.renderTask, this);
    return this.collection.fetch().render;
  };

  TasksView.prototype.render = function() {
    var tmpl;
    tmpl = _.template($("#tasksTemplate").html());
    return tmpl({
      "id": this.id
    });
  };

  TasksView.prototype.renderTask = function(task) {
    var taskView;
    this.collection.add(task);
    taskView = new TaskView({
      model: task
    });
    return $("#tasks-" + this.id).append(taskView.render().el);
  };

  return TasksView;

})(Backbone.View);

JobView = (function(_super) {
  __extends(JobView, _super);

  function JobView() {
    _ref7 = JobView.__super__.constructor.apply(this, arguments);
    return _ref7;
  }

  JobView.prototype.tagName = "li";

  JobView.prototype.tasksView = null;

  JobView.prototype.events = {
    'click .infos': 'afficherTasks'
  };

  JobView.prototype.initialize = function() {
    return this.model.bind("change", this.render);
  };

  JobView.prototype.render = function() {
    var tmpl;
    tmpl = _.template($("#jobTemplate").html());
    this.$el.html(tmpl(this.model.toJSON()));
    return this;
  };

  JobView.prototype.afficherTasks = function(event) {
    var id;
    if (this.tasksView == null) {
      id = $(event.currentTarget).closest("div.infos").data("id");
      this.tasksView = new TasksView;
      this.tasksView.setId(id);
      this.$el.after(this.tasksView.render());
      return this.$el.toggleClass("open");
    } else {
      this.$el.next("ul.tasks").remove();
      this.tasksView = null;
      return this.$el.toggleClass("open");
    }
  };

  return JobView;

})(Backbone.View);

DayView = (function(_super) {
  __extends(DayView, _super);

  function DayView() {
    _ref8 = DayView.__super__.constructor.apply(this, arguments);
    return _ref8;
  }

  DayView.prototype.id = null;

  DayView.prototype.date = null;

  DayView.prototype.initialize = function(date, id) {
    var _this = this;
    this.id = id;
    this.date = date;
    this.render;
    this.collection = new JobsCollection(date);
    this.collection.bind("add", this.renderJob, this);
    return this.collection.fetch({
      success: function() {
        if (_this.collection.length === 0) {
          return _this.renderEmpty();
        }
      }
    });
  };

  DayView.prototype.render = function() {
    var tmpl;
    tmpl = _.template($("#dayTemplate").html());
    return tmpl({
      "id": this.id,
      "date": this.date
    });
  };

  DayView.prototype.renderEmpty = function() {
    return $("#day-" + this.id + " ul.jobs").append(_.template($("#jobTemplateEmpty").html()));
  };

  DayView.prototype.renderJob = function(job) {
    var jobView;
    this.collection.add(job);
    jobView = new JobView({
      model: job
    });
    return $("#day-" + this.id + " ul.jobs").append(jobView.render().el);
  };

  return DayView;

})(Backbone.View);
