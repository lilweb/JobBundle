// Generated by CoffeeScript 1.6.3
(function() {
  var Application, Job, JobView, JobsCollection, JobsView, Task, TaskCollection, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  $(function() {
    new Application();
    return console.log("Starting applicaiton");
  });

  Application = (function(_super) {
    __extends(Application, _super);

    function Application() {
      _ref = Application.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Application.prototype.el = $("#container");

    Application.prototype.initialize = function() {
      return this.jobsView = new JobsView();
    };

    return Application;

  })(Backbone.View);

  Job = (function(_super) {
    __extends(Job, _super);

    function Job() {
      _ref1 = Job.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    Job.prototype.defaults = {
      id: null,
      name: null,
      dateCreation: null,
      dateUpdate: null
    };

    return Job;

  })(Backbone.Model);

  Task = (function(_super) {
    __extends(Task, _super);

    function Task() {
      _ref2 = Task.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    Task.prototype.defaults = {
      id: null,
      name: null,
      dateCreation: null,
      dateUpdate: null
    };

    return Task;

  })(Backbone.Model);

  JobsCollection = (function(_super) {
    __extends(JobsCollection, _super);

    function JobsCollection() {
      _ref3 = JobsCollection.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    JobsCollection.prototype.model = Job;

    JobsCollection.prototype.url = "http://ping.me/app_dev.php/api/v1/jobs.json";

    return JobsCollection;

  })(Backbone.Collection);

  TaskCollection = (function(_super) {
    __extends(TaskCollection, _super);

    function TaskCollection() {
      _ref4 = TaskCollection.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    TaskCollection.prototype.model = Task;

    TaskCollection.prototype.id = null;

    TaskCollection.prototype.initialize = function(id) {
      return this.id = id;
    };

    TaskCollection.prototype.url = function() {
      if (this.id) {
        return "http://ping.me/app_dev.php/api/v1/tasks/" + this.id + ".json";
      } else {
        console.log("There is no current id assigned");
        return "";
      }
    };

    return TaskCollection;

  })(Backbone.Collection);

  JobView = (function(_super) {
    __extends(JobView, _super);

    function JobView() {
      _ref5 = JobView.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    JobView.prototype.tagName = "li";

    JobView.prototype.tasks = null;

    JobView.prototype.events = {
      'click *': 'afficherJob'
    };

    JobView.prototype.initialize = function() {
      return this.model.bind("change", this.render);
    };

    JobView.prototype.render = function() {
      var tmpl;
      tmpl = _.template($("#jobTemplate").html());
      this.$el.html(tmpl(this.model.toJSON()));
      return this;
    };

    JobView.prototype.afficherJob = function(event) {
      var id;
      id = $(event.currentTarget).closest("div.infos").data("id");
      this.tasks = new TaskCollection(id);
      return this.tasks.fetch();
    };

    return JobView;

  })(Backbone.View);

  JobsView = (function(_super) {
    __extends(JobsView, _super);

    function JobsView() {
      _ref6 = JobsView.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    JobsView.prototype.$el = $("#jobs");

    JobsView.prototype.initialize = function() {
      this.collection = new JobsCollection();
      this.collection.bind("add", this.renderJob, this);
      return this.collection.fetch();
    };

    JobsView.prototype.renderJob = function(job) {
      var jobView;
      this.collection.add(job);
      jobView = new JobView({
        model: job
      });
      return $("ul.jobs").append(jobView.render().el);
    };

    return JobsView;

  })(Backbone.View);

}).call(this);
